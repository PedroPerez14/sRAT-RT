# List of things to be done in the near (or far (or very far)) future, in no particular order:

1.- Allow the definition and loading of custom shaders for the deferred shading pass of the scene (so far it's hardcoded in scene.cpp as {vertex/fragment}_deferred_lighting.glsl)
    1.1.- Where will the users be able to specify it? Config .ini file or scene .xml file?
2.- Define a proper format for our scenes, enabling specificaiton for models, textures, positions, rotations, etc.
    2.1.- Copy Mitsuba's format? Or will it be time consuming? hmmm
    2.2.- Hardcode a test scene? just specify a camera position, shaders, a target texture and a few shaders (deferred lighting are defined by default)



Other tasks:    - Add a few materials and a test scene with a single dir light



[17-04-24]
TODO LIST BEFORE BEING ABLE TO HAVE A RUNNING DEMO:
    - Implement the Transform class
    - Implement hierarchy Object(abstract)->RenderableObject(inherits)->Model(inherits again): 
            - Object should have a Transform member
            - RenderableObject should have a Material member
    - Add the 2 render passes/queues (3 but one of them is just the deferred geometry pass)
    - Later on, implement the hierarchy Object(abstract)->Light(inherits)->{point, dir}
            - Light should have a Transform member
            - More later on, add the areaLight class that inherits from both Light and Model (class Light : virtual Public Object ?)
    - Change Scene::Scene() to load a scene file (also define this format somewhere)
    - Change Scene::load_model() with anything necessary to match the new code structure
    - Modify Model::draw() and Mesh::draw() to take their Material into account
            - Call the Material's set_shader_uniforms() method before drawing!
    - Add Camera class !!
            - Add a Camera member to the Renderer superclass
    - Add all the new files into CMakeLists.txt before compiling!